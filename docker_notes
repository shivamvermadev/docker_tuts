docker run image_name   // it will check if the image is present locally on hard-drive and if not it will fetch the image from docker-hub and run it

docker ps  // this will list all the running containers

docker run -d image_name // will run the docker container in background and not logging its output on console. ex : docker run -d redis

docker run image_name overriding_command   // if we don't provide overriding command then docker with run the default command associate with image and also that overriding command should be prensent inside that image otherwise it will throw error!

docker ps --all // this will list all the container that had been run on a machine


docker run = docker create + docker start

docker create image_name // this will create a container from an image and will print the container id of new created container

docker start -a container_id // this will start the container from above, -a will watch the output from container and print it to my terminal

exited or stopped container can be restarted with docker start -a container_id or docker start container_id 

docker system prune // this will remove all the stopped containers that are occupying disk space

docker stop container_id // this will stop the container and it gives container 10sec to do all its clean up work like saving the file, if the container doesn't stop in 10 sec then docker will issue docker kill container_id internally and will kill the container

docker kill container_id // this will kill the container instantly

executing commands in running container - 
docker exec -it container_id command_to_be_issued // exec -> execute, -it -> input to container
ex: docker exec -it container_id bash // this will take us inside the running container 

docker run redis
ex: docker exec -it container_id redis-cli


-it can also be written as -i -t // -i refers as input to container, -t formats the output from the container on to the terminal

if we run - docker run -it image_name overriding_command // in this case the default command of image will be overriden with overriding_command so it is better to run - docker exec -it container_id after container is running and not when starting container

containers run in an isolated environment, so if file created inside one container cannot be found inside another container

--------------------
creating docker image
1- create docker file 
2- use an existing image
3- download and install dependency
4- default command to be run when image is run as container

ex 
# Use an existing docker image as a base

FROM alpine

# Download and install a dependency

RUN apk add --update redis

# Tell the image what to do when it starts as as container

CMD ["redis-server"]

after dockerfile creation, build docker image using - docker build .

creation of docker image uses cache
if some part of command was already ran earlier, then docker wont download those dependencies again, it uses cache.

tagging an image
docker build -t shivamvermadev/redis:latest . // this will tag the image with - shivamvermadev/redis

we can create container from an image
start some base image and add dependencies to it, after that get the container id of the base image
and then do - docker commit -c 'CMD ["redis-server"]' container_id - 
'CMD ["redis-server"]' is the default command that will be issued when that created image starts up

---
docker run with port mapping
docker run -p port1:port2 image_name // port1 - which is receiving request from browser or postman, port2 is the port inside container
by default container can make outside network calls but cannot recieve incoming request for that we have to port mapping as per above syntax
--------------------------------------

docker-compose

creating docker-compose.yml file will put containers listed in docker-compose file onto same network
to run all containers listed in docker-compose.yml run command ->  docker-compose up
docker-compose up -> is equivalent to > docker run image_name

docker build . and docker run image_name is equivalent to -> docker-compose up --build -> this will rebuild the image from the docker file that is present locally

docker-compose up -d // will run the images listed in docker-compose.yml file in background and not print anything on the console 

to stop the container running from docker-compose run -> docker-compose down

restarting crashed container- mentioning restart policy in docker-compose.yml file
there are 4 restart policies always, on-failure, unless-stopped, 'no' -> no will come in single quotes in docker-compose.yml file

----
pushing image to dockerhub
create repo in dockerhub like -> complex-app
tagging image locally, make sure to append the username -> devshivamverma
docker tag b52cc973e24875f9e99c8eea863347298579076d28d3e21c9b9c19ecf774b97e devshivamverma/complex-app:latest

pushing the image
docker push devshivamverma/complex-app:latest

--------------------------------------------------
Kubernetes 
If we want to run multiple types of images on same machine, K8s is the solution
minikube is the tool that is used to setup kubernetes on the local machine
minikube is going to create kubernetes cluster on your local machine, behind the scenes it creates virtual machines whose sole purpose is run some number of containers.
kubectl is the program used for managing these containers



---------------
StackOverFlow Question
https://stackoverflow.com/questions/23735149/what-is-the-difference-between-a-docker-image-and-a-container?page=1&tab=trending#tab-top

Docker Images vs. Containers
In Dockerland, there are images and there are containers. The two are closely related, but distinct.

What's an Image?
An image is an inert, immutable, file that's essentially a snapshot of a container. Images are created with the build command, and they'll produce a container when started with run. Images are stored in a Docker registry such as registry.hub.docker.com. Because they can become quite large, images are designed to be composed of layers of other images, allowing a minimal amount of data to be sent when transferring images over the network.
Local images can be listed by running docker images
REPOSITORY                       TAG       IMAGE ID       CREATED        SIZE
devshivamverma/complex-app       latest    b52cc973e248   7 months ago   507MB
complex-app                      latest    b52cc973e248   7 months ago   507MB
complex-client                   latest    b52cc973e248   7 months ago   507MB
complex-worker                   latest    c4488244cd59   7 months ago   127MB
complex-api                      latest    2961c4d57fe1   7 months ago   134MB
complex-nginx                    latest    b2717bfc7d84   7 months ago   142MB
jenkins/jenkins                  lts       056e9a39e8be   7 months ago   471MB
gcr.io/k8s-minikube/kicbase      v0.0.39   67a4b1138d2d   7 months ago   1.05GB
project-broker-service           latest    362da0f4f4ce   7 months ago   14.6MB
complex-server                   latest    2fbbc7e971c6   8 months ago   134MB
shivamvermadev/frontend-docker   latest    50c949b2bc43   8 months ago   503MB
visits_app-node-app              latest    6697187a38d8   8 months ago   184MB
shivamvermadev/visits            latest    b4526c1b572b   8 months ago   184MB
postgres                         latest    80c558ffdc31   8 months ago   379MB
node                             alpine    cddebfd13934   8 months ago   177MB
devshivamverma/redis             lastest   13c395b24413   8 months ago   12.8MB
devshivamverma/redis             latest    13c395b24413   8 months ago   12.8MB
shivamvermadev/redis             latest    cdfb258f8e98   8 months ago   12.8MB
busybox                          latest    bab98d58e29e   8 months ago   4.86MB
redis                            latest    f9c173b0f012   8 months ago   117MB
alpine                           latest    b2aa39c304c2   9 months ago   7.05MB
hello-world                      latest    feb5d9fea6a5   2 years ago    13.3kB

Some things to note:

    IMAGE ID is the first 12 characters of the true identifier for an image. You can create many tags of a given image, but their IDs will all be the same (as above).
    VIRTUAL SIZE is virtual because it's adding up the sizes of all the distinct underlying layers. This means that the sum of all the values in that column is probably much larger than the disk space used by all of those images.
    The value in the REPOSITORY column comes from the -t flag of the docker build command, or from docker tag-ing an existing image. You're free to tag images using a nomenclature that makes sense to you, but know that docker will use the tag as the registry location in a docker push or docker pull.
    The full form of a tag is [REGISTRYHOST/][USERNAME/]NAME[:TAG]. For ubuntu above, REGISTRYHOST is inferred to be registry.hub.docker.com. So if you plan on storing your image called my-application in a registry at docker.example.com, you should tag that image docker.example.com/my-application.
    The TAG column is just the [:TAG] part of the full tag. This is unfortunate terminology.
    The latest tag is not magical, it's simply the default tag when you don't specify a tag.
    You can have untagged images only identifiable by their IMAGE IDs. These will get the <none> TAG and REPOSITORY. It's easy to forget about them.

What's a container?
To use a programming metaphor, if an image is a class, then a container is an instance of a class—a runtime object. Containers are hopefully why you're using Docker; they're lightweight and portable encapsulations of an environment in which to run applications.
View local running containers with docker ps:

CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS      NAMES
1303e0012608   redis     "docker-entrypoint.s…"   14 minutes ago   Up 14 minutes   6379/tcp   nostalgic_yalow

Again, some things to note:

Like IMAGE ID, CONTAINER ID is the true identifier for the container. It has the same form, but it identifies a different kind of object.
docker ps only outputs running containers. You can view all containers (running or stopped) with docker ps -a.
NAMES can be used to identify a started container via the --name flag.


Always remove a useless, stopped container with docker rm [CONTAINER_ID].
Always remove the image behind a useless, stopped container with docker rmi [IMAGE_ID].
